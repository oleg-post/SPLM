.. highlight:: shell

============
Модули
============

Модули ядра
------------

Модуль admin_mgt
`````````````

Модуль предоставляет административный интерфейс портала

Модуль files_mgt
`````````````

Модуль предоставляет функционал файлового менеджера для загружаемых файлов портала


Модуль kv_editor
`````````````

Модуль предоставляет форму редактирования данных представленных в виде ключ-значение.

Модуль используется для редактирования файлов ... через интерфейс ...


Модуль query_mgt
`````````````

Модуль предоставляет функциональность для работы с триплстором через SPARQL запросы.

Модуль работает с триплстором через драйвер, который настраивается в административном интерфейсе.

Для вызова модуля query_mgt из других модулей необходимо использовать следуюший код:

	a) Для выполнения запроса к триплстору:
		from app.app_api import tsc_query
		tsc_query(query_code, params)
		где query_code - Python.String, код sparqt запроса; params - Python.Dict, переменные определенные
        в sparqt запросе

	б) Для создания редактора sparqt-файлов стороннего модуля:
		from app import app_api
		query_mod_api = app_api.get_mod_api('query_mgt')
		query_mod_api.create_sparqt_manager('/sparqt', mod)
		где mod - объект Blueprint для стороннего модуля, тогда по url <mod.url_prefix>/sparqt создастся
        интерфейс редактора sparqt-файлов

Формат запроса, передаваемый модулю query_mgt (функция tsc_query) должен быть в виде:

	a) tsc_query(_q, params = {})
		где _q - код запроса в формате Python.String : <module>.<file>.<template>, params - переменные для
        подстановки в запрос в формате Python.Dict : {<VARNAME> : <VALUE>}

	б) tsc_query(_q)
		где _q - текстовый SPARQL запрос в формате Python.String


После выполнения запроса в триплсторе модуль делает пост-обработку. Модуль query_mgt возвращает
объект типа Python.List, содержащий список объектов типа Python.Dict. В каждом объекте типа
Python.Dict содержаться пары ключ-значение запрашиваемых переменных.

В случае если запрос к базе был некорректный (или во время запроса произошла ошибка), то
возвращается объект типа Python.String c текстом ошибки. В лог Query.log добавляется запись типа
error c причиной невыполнения запроса.

Если запрос к базе вернул пустой запрос, то модуль возвращает пустой объект типа Python.List = []



Модуль onto_mgt
`````````````

Модуль предоставляет функциональность для работы с онтологиями.



Модуль themes_mgt
`````````````

Преднастроенные темы портала находятся в директории внутри модуля - themes_mgt/themes_list.

При старте проекта происходит проверка есть ли темы в директории app/cfg/themes, если тем
нет, то темы копируются туда из директории модуля. Установленные темы можно просматривать
в административном интерфейсе в разделе "Настройки портала" -> "Управление темами".

Для изменения преднастроенных тем требуется изменить файлы тем в директории модуля.
Для обновления преднастроенных тем для портала требуется в "Управление темами" нажать
кнопку "Обновить преднастроенные темы". По этой кнопке выполняется перезапись тем из
папки модуля в папку app/cfg/themes.

Для создания пользовательской темы требуется сделать копию папки с файлами одной из
преднастроенных тем. Изменить копию под требуемый дизайн. Создать архив zip темы.
Содержимое архива - директория с именем темы. Содержимое директории в архиве - файлы и
поддиректории по требованиям плагина https://flask-themes2.readthedocs.io/en/latest/.
Созданный архив требуется загрузить через Управление темами с помощью кнопки Загрузить.
При таком сценарии создання тема будет помещена в папку app/cfg/themes и будет испольховаться
только для данной инсталляции потала.

Для создания преднастроенной темы, когда тему нужно будет использовать во всех инсталляциях,
zip-архив создавать не нужно. Достаточно папку с настроенной темой сохранить в папке иодуля
themes_mgt/themes_list.

Для применения темы на портале требуется сделать выбранную тему активной. Активация темы
происходит путем установки флага "активная", через окно редактирования темы в разделе
административного интерфейса Управления темами.

Настройка стартовой страницы портала может происходить несколькими путями:

1 - В административном интерфейсе, раздел Конфигуратор, пункт Основная конфигурация -
требуется изменить параметр "mainpage" секции "Info", указав url от корня без домена
текущего портала с ведущим "/".

2 - В файле dublin.ttl модуля указать url и связать его с модулем отношением
osplm:hasStartURL. Дополнительно можно указать, что данный url является активным через
отношение с флагом: osplm:isActive xsd:true.
Данный флаг указывает на обработку данного url в первуюю очередь. Отсутствие данного
флага или выставленного значения xsd:false приведет к случайному выбору из множества url
указанных с отношением osplm:hasStartURL.

Единственное требование это расширять шаблоны модуля (шаблона страницы в целом) от шаблона
портала с помощью конструкции {% extends app_root_tpl() %} и для рендеринга страницы
использовать встроенную функцию api портала app_api.render_page().


Модуль user_mgt
`````````````

Модуль предоставляет функционал управления пользователями и ролями.


Модуль utilites
`````````````

В этом модуле собраны вспомогательные функции, которые часто используются для обработки данных.


Модуль wiki
`````````````

Модуль предоставляет функциональность для работы с WIKI-страничками.
Такие странички можно создавать для размещения на портале информации, представляемой в
традиционном формате WEB-2.0. Т.е. не в семантическом, а текстовом виде с включением
медиа-контента и ссылок. Например, для создания странички "Помощь",
"Инструкции", "Новости" и т.д.

Для разработки WIKI страничек используется библиотека python-markdown2, краткая помощь
по ее использованию размещена под формой редактирования WIKI-странички.

Полное описание синтаксиса дано по ссылкам:
	a) https://github.com/sandino/Markdown-Cheatsheet/blob/master/README.md
	б) https://gist.github.com/Jekins/2bf2d0638163f1294637

Для отображения wiki-страницы в интерфесе SPLM необходимо добавить ее url в административном
меню "Навигация".


Модули расширения функциональности (Open Source)
------------

Модуль mod_analysis
`````````````

Модуль предоставляет функциональность для построения отчетов. В качестве библиотеки для
графического представления использована open source библиотека 'plotly'.

Модуль mod_auth_ldap
`````````````

Модуль предоставляет функциональность авторизации по протоколу LDAP.


Модули расширения функциональности (Proprietary)
------------

Модуль mod_bimserver
`````````````

Модуль позволяет включить интерфейс BimServer в интерфейс портала.


Модуль mod_data_quality
`````````````

Модуль предоставляет функциональность для работы с машиночитаемыми треобваниями. Разработка машиночитаемых
требований должна вестись на SHACL. Модуль имеет интерфейс для редактирования SHACL-правил и интерфейс для
запуска првил и вывода результатов проверки на экран (страницу портала).

Модуль предназачен для обеспечения контроль качества данных после их загрузки на портал. А так же для выполнения
операций логических выводов над загруженными данными. Если в первом случае результатом проверки является отчет
о несоответствии. То результаты логических выводов можно записывать в базу данных как извлеченные знания.

Стандарт W3C по работе с SHACK можно изучить здесь: https://www.w3.org/TR/shacl/ и здесь https://www.w3.org/TR/shacl-af/


Модуль mod_textcompare
`````````````

Модуль интеллектуального сравнения текстов требований. Модуль позволяет сравнивать тексты двумя
по двум вариантам.

Первый вариант - «целиком по требованию». Из названия метода понятно,
что минимальным фрагментом текста является весь текст исходного требования. Сравнению
подвергаются так же полные тексты требований анализируемых документов.

Второй вариант сравнения - «по предложениям». В этом варианте требования исходного документа разбиваются на
предложения и сравниваются с каждым предложением в каждом требовании анализируемых документов.

Первый вариант сравнения рекомендуется использовать для документов, созданных из общего шаблона
или разных версий одного документа. Т.е. в тех случаях, когда разметка текста на требования
выполнена одинаково. Для таких документов можно решать и обратную задачу - поиска различий в
требованиях.

Второй вариант сравнения более ресурсозатратный и требует большего компьютерного
времени. Его рекомендуется использовать для документов разных структур и с разными подходами
по разметке текстов на требования.

Модуль сравнения текстов разработан так, что позволяет повысить скорость обработки текстов за счет возможности
исключения из анализа заголовков и других элементов структуры документа. При этом, классификации самих
фрагментов текста, которая относится к содержательной части документа, не может быть исключена из обработки.
Это сделано специально для того, чтобы, избежать ситуации с ошибками классификации, т.е. когда схожие тексты в
одном документе классифицированы как требование, а в другом – как пояснительный текст. Сравнение текстов
характеризуется параметром «Степень сходства»,который может варьироваться от 1 до 100%, а модуле задается через
десятичную дробь в диапазоне от 0 до 1. Если требуется найти совпадения текстов, то, как правило, выбирается
условие: «более» 0.8.

.. image:: images/screenshot_30.png
  :width: 90 %
  :align: center


Модуль mod_controlling
`````````````
Модуль контроллинга предназначен для построения на предприятии эффективной системы показателей,
дающих объективную оценку хода выполнения процесса или проекта.
Модуль контроллинга рассчитывает текущий рейтинг проекта / процесса и хранит историю изменений рейтинга.

Такой подход обеспечивает прозрачность работы исполнителей и предоставляет возможность количественной оценки
их работы с точки зрения соблюдения сроков и качества.

Рейтинг, как универсальный показатель, позволяет измерять и сравнивать ситуацию в проекте в целом и в
подпроектах разных уровней.