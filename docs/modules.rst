.. highlight:: shell

============
Модули
============

Модули ядра
------------

Модуль admin_mgt
`````````````

Модуль предоставляет административный интерфейс портала

Модуль files_mgt
`````````````

Модуль предоставляет функционал файлового менеджера для загружаемых файлов портала


Модуль kv_editor
`````````````

Модуль предоставляет форму редактирования данных представленных в виде ключ-значение.

Модуль используется для редактирования файлов ... через интерфейс ...


Модуль query_mgt
`````````````

Модуль предоставляет функциональность для работы с триплстором через SPARQL запросы.

Модуль работает с триплстором через драйвер, который настраивается в административном интерфейсе.
1) Для вызова модуля query_mgt из других модулей необходимо использовать следуюший код:

	a) Для выполнения запроса к триплстору:
		from app.app_api import tsc_query
		tsc_query(query_code, params)
		где query_code - Python.String, код sparqt запроса; params - Python.Dict, переменные определенные в sparqt запросе

	б) Для создания редактора sparqt-файлов стороннего модуля:
		from app import app_api
		query_mod_api = app_api.get_mod_api('query_mgt')
		query_mod_api.create_sparqt_manager('/sparqt', mod)
		где mod - объект Blueprint для стороннего модуля, тогда по url <mod.url_prefix>/sparqt создастся интерфейс редактора sparqt-файлов

2) Формат запроса, передаваемый модулю query_mgt (функция tsc_query) должен быть в виде:

	a) tsc_query(_q, params = {})
		где _q - код запроса в формате Python.String : <module>.<file>.<template>, params - переменные для подстановки в запрос в формате Python.Dict : {<VARNAME> : <VALUE>}

	б) tsc_query(_q)
		где _q - текстовый SPARQL запрос в формате Python.String


3) Модуль query_mgt возвращает объект типа Python.List, содержащий список объектов типа Python.Dict.
В каждом объекте типа Python.Dict содержаться пары ключ-значение запрашиваемых переменных.

4) В случае если запрос к базе был некорректный (или во время запросы произошла ошибка), то возвращается объект типа Python.String c текстом ошибки. В лог Query.log добавляется запись типа error c причиной невыполнения запроса

5) Если запрос к базе вернул пустой запрос, то модуль возвращает пустой объект типа Python.List = []

6) После выполнения запроса в триплсторе модуль делает пост-обработку результата описанную в пункте 3.



Модуль onto_mgt
`````````````

Модуль предоставляет функциональность для работы с онтологиями.


Модуль themes_mgt
`````````````

Модуль позволяет управлять темами портала.
Где храняться темы?
Как можно изменять и настраивать темы (преднастроенные и пользовательские темы)?
Как настраивать первую (стартовую) страничку портала?
Как надо использовать темы при разработке своего модуля?



Модуль user_mgt
`````````````

Модуль предоставляет функционал управления пользователями и ролями.


Модуль utilites
`````````````

В этом модуле собраны вспомогательные функции, которые часто используются для обработки данных.


Модуль wiki
`````````````

Модуль предоставляет функциональность для работы с WIKI-страничками.
Такие странички можно создавать для размещения на портале информации, представляемой в традиционном формате WEB-2.0.
Т.е. не в семантическом, а текстовом виде с включением медиа-контента и ссылок. Например, для создания странички "Помощь",
"Инструкции", "Новости" и т.д.

Для разработки WIKI страничек используется Markdown ..., краткая помощь по этому Markdown размещена
под формой редактирования WIKI-странички. Подное описание синтаксиса дано ....

Для отображения страничек в интерфесе SPLM необходимо выполнить настройки в административном меню "Навигация".


Модули расширения функциональности (Open Source)
------------

Модуль mod_analysis
`````````````

Модуль предоставляет функциональность для построения отчетов. В качестве библиотеки для
графического представления использована open source библиотека 'plotly'.


Модули расширения функциональности (Proprietary)
------------

Модуль mod_bimserver
`````````````

Модуль позволяет включить интерфейс BimServer в интерфейс портала.


Модуль mod_data_quality
`````````````

Модуль предоставляет функциональность для работы с машиночитаемыми треобваниями. Разработка машиночитаемых
требований должна вестись на SHACL. Модуль имеет интерфейс для редактирования SHACL-правил и интерфейс для
запуска првил и вывода результатов проверки на экран (страницу портала).

Модуль mod_textcompare
`````````````

Модуль интеллектуального сравнения текстов требований. Модуль позволяет сравнивать тексты двумя
по двум вариантам.

Первый вариант - «целиком по требованию». Из названия метода понятно,
что минимальным фрагментом текста является весь текст исходного требования. Сравнению
подвергаются так же полные тексты требований анализируемых документов.

Второй вариант сравнения - «по предложениям». В этом варианте требования исходного документа разбиваются на
предложения и сравниваются с каждым предложением в каждом требовании анализируемых документов.

Первый вариант сравнения рекомендуется использовать для документов, созданных из общего шаблона
или разных версий одного документа. Т.е. в тех случаях, когда разметка текста на требования
выполнена одинаково. Для таких документов можно решать и обратную задачу - поиска различий в
требованиях.

Второй вариант сравнения более ресурсозатратный и требует большего компьютерного
времени. Его рекомендуется использовать для документов разных структур и с разными подходами
по разметке текстов на требования.


Модуль mod_controlling
`````````````
Модуль контроллинга предназначен для построения на предприятии эффективной системы показателей,
дающих объективную оценку хода выполнения процесса или проекта.
Модуль контроллинга рассчитывает текущий рейтинг проекта / процесса и историю изменений рейтинга.

Такой подход обеспечивает прозрачность работы исполнителей и предоставляет возможность
количественной оценки их работы с точки зрения соблюдения сроков и качества.

Рейтинг, как универсальный показатель, позволяет измерять и сравнивать ситуацию в проекте в
целом и в подпроектах разных уровней.