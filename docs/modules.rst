.. highlight:: shell

============
Модули
============


Модули ядра
------------

Модуль admin_mgt
`````````````

Модуль предоставляет административный интерфейс портала

Модуль files_mgt
`````````````

Модуль предоставляет функционал файлового менеджера для загружаемых файлов портала


Модуль kv_editor
`````````````

Модуль предоставляет форму редактирования данных представленных в виде ключ-значение.

Модуль используется для редактирования файлов ... через интерфейс ...


Модуль query_mgt
`````````````

Модуль предоставляет функциональность для работы с триплстором через SPARQL запросы.

Модуль работает с триплстором через драйвер, который настраивается в административном интерфейсе.
1) Для вызова модуля query_mgt из других модулей необходимо использовать следуюший код:

	a) Для выполнения запроса к триплстору:
		from app.app_api import tsc_query
		tsc_query(query_code, params)
		где query_code - Python.String, код sparqt запроса; params - Python.Dict, переменные определенные в sparqt запросе

	б) Для создания редактора sparqt-файлов стороннего модуля:
		from app import app_api
		query_mod_api = app_api.get_mod_api('query_mgt')
		query_mod_api.create_sparqt_manager('/sparqt', mod)
		где mod - объект Blueprint для стороннего модуля, тогда по url <mod.url_prefix>/sparqt создастся интерфейс редактора sparqt-файлов

2) Формат запроса, передаваемый модулю query_mgt (функция tsc_query) должен быть в виде:

	a) tsc_query(_q, params = {})
		где _q - код запроса в формате Python.String : <module>.<file>.<template>, params - переменные для подстановки в запрос в формате Python.Dict : {<VARNAME> : <VALUE>}

	б) tsc_query(_q)
		где _q - текстовый SPARQL запрос в формате Python.String


3) Модуль query_mgt возвращает объект типа Python.List, содержащий список объектов типа Python.Dict.
В каждом объекте типа Python.Dict содержаться пары ключ-значение запрашиваемых переменных.

4) В случае если запрос к базе был некорректный (или во время запросы произошла ошибка), то возвращается объект типа Python.String c текстом ошибки. В лог Query.log добавляется запись типа error c причиной невыполнения запроса

5) Если запрос к базе вернул пустой запрос, то модуль возвращает пустой объект типа Python.List = []

6) После выполнения запроса в триплсторе модуль делает пост-обработку результата описанную в пункте 3.



Модуль onto_mgt
`````````````

Модуль предоставляет функциональность для работы с онтологиями.


Модуль themes_mgt
`````````````

Модуль позволяет управлять темами портала.
Где храняться темы?
Как можно изменять и настраивать темы (преднастроенные и пользовательские темы)?
Как настраивать первую (стартовую) страничку портала?
Как надо использовать темы при разработке своего модуля?



Модуль user_mgt
`````````````

Модуль предоставляет функционал управления пользователями и ролями.


Модуль utilites
`````````````

В этом модуле собраны вспомогательные функции, которые часто используются для обработки данных.


Модуль wiki
`````````````

Модуль предоставляет функциональность для работы с WIKI-страничками.
Такие странички можно создавать для размещения на портале информации, представляемой в традиционном формате WEB-2.0.
Т.е. не в семантическом, а текстовом виде с включением медиа-контента и ссылок. Например, для создания странички "Помощь",
"Инструкции", "Новости" и т.д.

Для разработки WIKI страничек используется Markdown ..., краткая помощь по этому Markdown размещена
под формой редактирования WIKI-странички. Подное описание синтаксиса дано ....

Для отображения страничек в интерфесе SPLM необходимо выполнить настройки в административном меню "Навигация".


Модули расширения функциональности GNU
------------

Модуль mod_analysis
`````````````

Модули расширения функциональности Proprietary
------------

Модуль mod_bimserver
`````````````

Модуль mod_data_quality
`````````````

Модуль mod_textcompare
`````````````

Модуль mod_controlling
`````````````
