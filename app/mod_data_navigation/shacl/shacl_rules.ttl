@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix pizza: <http://www.co-ode.org/ontologies/pizza/pizza.owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix terms: <http://purl.org/dc/terms/> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

pizza:HotSpicedPizzaShape
    a sh:NodeShape ;
    sh:targetClass pizza:Pizza ;
	sh:property [
		sh:path (pizza:hasPart pizza:hasSpiciness) ;
		sh:nodeKind sh:IRI ;
        sh:class pizza:Hot ;
		sh:minCount 1 ;
	] ;
.
pizza:HotSpicedPizzaRuleShape
    a sh:NodeShape ;
    sh:targetClass pizza:Pizza ;
    sh:rule [
        a sh:TripleRule ;
        sh:name "Rule 001" ;
        sh:description "Если в топпиге есть острый перец, то пицца относится к классу Острые пиццы" ;
        sh:prefixes pizza: ;
        sh:subject sh:this ;
        sh:predicate rdf:type ;
        sh:object pizza:SpicyPizza ;
        sh:condition pizza:HotSpicedPizzaShape ;
        ] ;
.
pizza:NonVegetarianPizzaRulesShape
	a sh:NodeShape ;
	sh:targetClass pizza:Pizza ;
	sh:rule [
		a sh:SPARQLRule ;
		sh:name "Rule 002" ;
        sh:description "Если у пиццы мясной или рыбный топпинг, то это НЕ вегитарианская пицца." ;
		sh:prefixes pizza: ;
		sh:construct """
			CONSTRUCT {
				$this rdf:type pizza:NonVegetarianPizza .
			}
			WHERE {
  					$this a/rdfs:subClassOf* pizza:Pizza .
  					$this pizza:hasPart ?o .
  					?o a/rdfs:subClassOf* ?cls . filter (?cls IN (pizza:FishTopping, pizza:MeatTopping))
			}
			""" ;
	] ;
.
pizza:VegetarianPizzaRulesShape
	a sh:NodeShape ;
	sh:targetClass pizza:Pizza ;
	sh:rule [
		a sh:SPARQLRule ;
		sh:name "Rule 003" ;
        sh:description "Если у пиццы нет мясного или рыбного топпинга, или вообще нет топпинга, то это Вегитарианская пицца." ;
		sh:prefixes pizza: ;
		sh:construct """
			CONSTRUCT {
				$this rdf:type pizza:VegetarianPizza .
			}
			WHERE {
				  $this a/rdfs:subClassOf* pizza:Pizza .
				  #$this pizza:hasPart ?tp .
				  minus {
				  ?fish rdfs:subClassOf* pizza:FishTopping .
				  ?meat rdfs:subClassOf* pizza:MeatTopping .
				  $this a/rdfs:subClassOf* pizza:Pizza .
				  $this pizza:hasPart ?o . #filter (?o != ?fish && ?o != ?meat)
				  ?o a ?cls . filter (?cls IN (?fish, ?meat)) }			}
			""" ;
	] ;
.
